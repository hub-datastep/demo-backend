import pandas as pd
import sys
from save_excel import save_to_excel


# Путь к Excel файлу
file_path = r"c:\Users\Dmitry\Downloads\Копия (ACTUAL) Combined Categories and Materials aka NSI(АвтоматическиВосстановлено).xlsx"

# Открываем файл для записи
file = open("output_file.txt", 'w', encoding='utf-8')

# Перенаправляем стандартный поток вывода (stdout) в файл
sys.stdout = file


# Чтение данных из файла
df = pd.read_excel(file_path, sheet_name="Лист5", usecols=["name", "group"])

# Преобразуем данные в словарь, где ключ - это группа, а значение - список имен
grouped_data = df.groupby("group")["name"].apply(list).to_dict()

f = {
  "Арматура стальная Материалы": ["Арматура стальная"],
  "Бетон Материалы": ["Бетон"],
  "Блок ветиляционный": ["Блок ветиляционный"],
  "Блоки ФБС Материалы": ["Блоки ФБС"],
  "Двери металлические квартирные и технические Материалы": ["Двери металлические квартирные и технические"],
  "Кабель силовой Материалы": ["Кабель силовой"],
  "Кирпич": ["Кирпич керамический", "Кирпич силикатный"],
  "Лифтовое оборудование Материалы": ["Лифтовое оборудование"],
  "Металлоконструкции Материалы": ["Металлоконструкции", "Каркас"],
  "Водоснабжение и Канализация": ["Наружные сети (Водоснабжение и Канализация)", "Насосные станции"],
  "Освещение": ["Наружные сети (Освещение)", "Осветительные приборы"],
  "Теплоснабжение": ["Наружные сети (Теплоснабжение)", "Тепловые пункты"],
  "Пазогребневые плиты гипсовые Материалы": ["Пазогребневые плиты гипсовые"],
  "Пенополистирол Материалы": ["Пенополистирол (ППС)", "Экструдированный пенополистирол (ЭППС)"],
  "Перемычки железобетонные Материалы": ["Перемычки железобетонные"],
  "Плиты перекрытия железобетонные пустотные Материалы": ["Плиты перекрытия железобетонные пустотные"],
  "Радиаторы и конвекторы Материалы": ["Радиаторы и конвекторы"],
  "Светопрозрачные конструкции": [
    "Светопрозрачные конструкции из ПВХ профиля",
    "Светопрозрачные конструкции из алюминиевого профиля"
  ],
  "Сетка кладочная Материалы": ["Сетка кладочная"],
  "Счётчики учёта энергоресурсов Материалы": ["Счётчики учёта энергоресурсов"],
  "Термобалансировочное оборудование Материалы": ["Термобалансировочное оборудование"],
  "Трубы из сшитого полиэтилена Материалы": ["Трубы из сшитого полиэтилена"],
  "Утеплитель минераловатный Материалы": ["Утеплитель минераловатный"],
  "Фасадная Материалы": ["Фасадная облицовка", "Фасадная подсистема"],
  "Щитовое оборудование Материалы": ["Щитовое оборудование"],
  "any": [
    "Балки железобетонные",
    "Блоки и другие стеновые материалы",
    "Гидроизоляционные материалы",
    "Звукоизоляционные материалы",
    "Наружные сети (Электрика)"
  ]
}

cnt = {'Арматура стальная Материалы': 0, 'Бетон Материалы': 0, 'Блок ветиляционный': 0, 'Блоки ФБС Материалы': 0, 'Двери металлические квартирные и технические Материалы': 0, 'Кабель силовой Материалы': 0, 'Кирпич': 0, 'Лифтовое оборудование Материалы': 0, 'Металлоконструкции Материалы': 0, 'Водоснабжение и Канализация': 0, 'Освещение': 0, 'Теплоснабжение': 0, 'Пазогребневые плиты гипсовые Материалы': 0, 'Пенополистирол Материалы': 0, 'Перемычки железобетонные Материалы': 0, 'Плиты перекрытия железобетонные пустотные Материалы': 0, 'Радиаторы и конвекторы Материалы': 0, 'Светопрозрачные конструкции': 0, 'Сетка кладочная Материалы': 0, 'Счётчики учёта энергоресурсов Материалы': 0, 'Термобалансировочное оборудование Материалы': 0, 'Трубы из сшитого полиэтилена Материалы': 0, 'Утеплитель минераловатный Материалы': 0, 'Фасадная Материалы': 0, 'Щитовое оборудование Материалы': 0, 'any': 0}

our = {'Арматура стальная': 'Арматура стальная Материалы', 'Бетон': 'Бетон Материалы', 'Блок ветиляционный': 'Блок ветиляционный', 'Блоки ФБС': 'Блоки ФБС Материалы', 'Двери металлические квартирные и технические': 'Двери металлические квартирные и технические Материалы', 'Кабель силовой': 'Кабель силовой Материалы', 'Кирпич керамический': 'Кирпич', 'Кирпич силикатный': 'Кирпич', 'Лифтовое оборудование': 'Лифтовое оборудование Материалы', 'Металлоконструкции': 'Металлоконструкции Материалы', 'Каркас': 'Металлоконструкции Материалы', 'Наружные сети (Водоснабжение и Канализация)': 'Водоснабжение и Канализация', 'Насосные станции': 'Водоснабжение и Канализация', 'Наружные сети (Освещение)': 'Освещение', 'Осветительные приборы': 'Освещение', 'Наружные сети (Теплоснабжение)': 'Теплоснабжение', 'Тепловые пункты': 'Теплоснабжение', 'Пазогребневые плиты гипсовые': 'Пазогребневые плиты гипсовые Материалы', 'Пенополистирол (ППС)': 'Пенополистирол Материалы', 'Экструдированный пенополистирол (ЭППС)': 'Пенополистирол Материалы', 'Перемычки железобетонные': 'Перемычки железобетонные Материалы', 'Плиты перекрытия железобетонные пустотные': 'Плиты перекрытия железобетонные пустотные Материалы', 'Радиаторы и конвекторы': 'Радиаторы и конвекторы Материалы', 'Светопрозрачные конструкции из ПВХ профиля': 'Светопрозрачные конструкции', 'Светопрозрачные конструкции из алюминиевого профиля': 'Светопрозрачные конструкции', 'Сетка кладочная': 'Сетка кладочная Материалы', 'Счётчики учёта энергоресурсов': 'Счётчики учёта энергоресурсов Материалы', 'Термобалансировочное оборудование': 'Термобалансировочное оборудование Материалы', 'Трубы из сшитого полиэтилена': 'Трубы из сшитого полиэтилена Материалы', 'Утеплитель минераловатный': 'Утеплитель минераловатный Материалы', 'Фасадная облицовка': 'Фасадная Материалы', 'Фасадная подсистема': 'Фасадная Материалы', 'Щитовое оборудование': 'Щитовое оборудование Материалы', 'Балки железобетонные': 'any', 'Блоки и другие стеновые материалы': 'any', 'Гидроизоляционные материалы': 'any', 'Звукоизоляционные материалы': 'any', 'Наружные сети (Электрика)': 'any'}
# Обрабатываем каждую группу

def trim_list_by_step(group, input_list, target_size=130):
    # Если список уже меньше или равен целевому размеру, возвращаем его
    if len(input_list) <= target_size:
        return input_list
    
    # Определим шаг для выборки
    step = len(input_list) // target_size

    # Список для хранения результата
    result = []
    
    # Выбираем элементы с шагом
    deg = len(input_list) % target_size
    if deg > (target_size//2-1):
        for i in range(0, target_size*step//2, step):
            result.append([input_list[i], group])
        # step+=1
        for i in range(target_size*step//2+deg, len(input_list), step):
            result.append([input_list[i], group])

        print(len(result))
    else:
        for i in range(0, len(input_list), step):
            result.append([input_list[i], group])

    print(step)
    # Если количество выбранных элементов больше target_size, обрезаем
    if len(result) > target_size:
        result = result[:target_size]
    print("res: ", result)
    return result

excel_output = []

for group, names in grouped_data.items():
    print(f"{group}, len={len(names)}:")
    
    excel_output += trim_list_by_step(group, names)
    try:
        o = our[group]
        cnt[o]+=len(names)
    except:
        pass
    if len(names) >= 10:
        # Если длина списка names >= 10, берем каждый k-ый элемент
        k = len(names) // 7
        selected_names = [names[i] for i in range(0, len(names), k)]
    else:
        # Если длина списка меньше 10, выводим все имена
        selected_names = names

    # Выводим имена для текущей группы
    for idx, name in enumerate(selected_names, 1):
        print(f"- {name}")
    
    print()  # Печатаем пустую строку между группами для читаемости
print(cnt)
print()
print()
print(excel_output)
save_to_excel(excel_output, "NEW_DATASET_UNISTOI.xlsx")